#!/usr/bin/python3

import json
from string import ascii_uppercase, ascii_lowercase
from datetime import datetime

output_file = open("./generated-preamble.tex", "w+")
output_file.write("""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Autogenerated LaTeX macro file
%%% Generated {}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
""".format(datetime.now().strftime('%Y-%m-%d %H:%M:%S')))

format_file = open("./format.json", "r")
format = json.load(format_file)

special_fonts = format['special-font-letters']

for font_name in special_fonts.keys():
    output_file.write("""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% {} characters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
""".format(font_name))
    font = special_fonts[font_name]

    output_file.write("\n%%% uppercase\n\n")

    for c in ascii_uppercase:
        output_file.write(
            "\\newcommand{{\\{prefix}{char_lower}}}{{\\{command}{{{char}}}}}\n".
            format(
                prefix=font["prefix"],
                command=font["command"],
                char=c,
                char_lower=c.lower()))

    output_file.write("\n%%% lowercase\n\n")

    for c in ascii_lowercase:
        output_file.write(
            "\\newcommand{{\\{prefix}{char_lower}}}{{\\{command}{{{char}}}}}\n".
            format(
                prefix=font["prefix"],
                command=font["command"],
                char=c,
                char_lower=c.upper()))

sections = format['sections']

output_file.write("\n")

for topic in sections.keys():
    topic_format = sections[topic]
    output_file.write("""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% section \"{}\"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
""".format(topic))

    # Math operators

    try:
        math_operators = topic_format['math-operators']
        output_file.write("\n%%% Math operators\n\n")
        for op in math_operators.keys():
            op_data = math_operators[op]

            if "comment" in op_data:
                comment = op_data["comment"]
                if comment == "":
                    comment = "Add a comment for this"
                output_file.write("% " + comment + "\n")

            if "upper" in op_data:
                upper = op_data["upper"]
            else:
                upper = True

            if "text" in op_data:
                txt = op_data["text"]
            else:
                if upper:
                    text = op.capitalize()
                else:
                    text = op

            if "custom-face" in op_data:
                output_file.write(
                    "\\newcommand{{\\{op}}}{{\\{custom_face}{{{op}}}}}\n\n".format(
                        op=op, custom_face=op_data["custom-face"]))
            else:
                if "star" in op_data and op_data["star"]:
                    output_file.write(
                        "\DeclareMathOperator*{{\\{0}}}{{{1}}}\n\n".format(
                            op, text))
                else:
                    output_file.write(
                        "\DeclareMathOperator{{\\{0}}}{{{1}}}\n\n".format(
                            op, text))

    except KeyError:
        pass

    try:
        expr_aliases = topic_format['expression-aliases']
        output_file.write("%%% Aliases\n\n")
        for ncmd in expr_aliases.keys():
            ncmd_data = expr_aliases[ncmd]
            output_file.write("% {}\n".format(ncmd_data['comment']))
            output_file.write("\\newcommand{{\\{0}}}{{{1}}}\n\n".format(
                ncmd, ncmd_data['full-expr']))
    except KeyError as k:
        pass
